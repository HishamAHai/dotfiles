#################################
#             Shadows           #
#################################
shadow = false;
shadow-radius = 30;
shadow-opacity = .75
shadow-offset-x = -30;
shadow-offset-y = -30;
# shadow-red = 0
# shadow-green = 0
# shadow-blue = 0
# shadow-color = "#000000"
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g = 'Screenkey'",
  "class_g = 'mpv'",
  "class_g = 'Double Commander'",
  "class_g = 'resolve'",
  "class_g='Blender'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "class_g = 'dwm'",
  "QTILE_INTERNAL:32c = 1",
  "class_g *?= 'slop'",
  "_GTK_FRAME_EXTENTS@:c",
  "window_type = 'notification'"
];

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""

# Crop shadow of a window fully on a particular monitor to that monitor. This is
# currently implemented using the X RandR extension.
# crop-shadow-to-monitor = false


#################################
#           Fading              #
#################################
fading = true;
fade-in-step = 0.1;
fade-out-step = 0.1;
fade-delta = 8

#################################
#   Transparency / Opacity      #
#################################
# inactive-opacity = 1
# frame-opacity = 1.0
# inactive-opacity-override = true
inactive-opacity-override = true;
# active-opacity = 1.0
# inactive-dim = 0.0

# Specify a list of conditions of windows that should never be considered focused.
focus-exclude = [
"class_g = 'Cairo-clock'" ,
];
opacity-rule = [
	"100:class_g='VirtualBox Machine'",
	"100:class_g='resolve'",
	"95:window_type='dialog'",
	"95:class_g='Hardinfo'",
	"95:class_g='Psensor'",
	"95:name ?='xmobar'",
	"95:class_g='Pamac-manager'",
	#"30:class_g='Gimp-2.10'",
	"100:window_type='normal'",
];

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 18;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
    #"class_g='dmenu'",
    "class_g='awesome'",
    "class_g='livecaptions'",
    "class_g='resolve'",
    "class_g='Blender'",
    "class_g='obs'",
    "class_g = 'Double Commander'",
    #"QTILE_INTERNAL:32c = 1",
    #"class_g='dwm'",
    #"window_type = 'dock'",
    "window_type = 'tooltip'",
];
round-borders-rule = [
    "1:class_g='Dunst'",
];


#################################
#     Background-Blurring       #
#################################
blur: {
  method = "dual_kawase";
  strength = 8;
  background = true;
  background-frame = false;
  background-fixed = false;
}


# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'desktop'",
  #"_GTK_FRAME_EXTENTS@:c",
  #"class_g='Gimp-2.10'",
];

#################################
#       General Settings        #
#################################
backend = "glx"
dithered-present = false;
vsync = true
# dbus = false
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;
use-ewmh-active-win = true;
unredir-if-possible = false;
# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0
# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []
# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# detect-client-leader = false

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
#
# invert-color-include = []

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
#
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
glx-no-rebind-pixmap = true

# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
xrender-sync-fence = true;

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
# in the source tree for examples.
#
window-shader-fg = "default";

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = true;

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
transparent-clipping = false;

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls whether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = false; shadow = false; full-shadow = false; blur-background = true; }
  dock = { shadow = false }
  dnd = { shadow = false }
  popup_menu = { opacity = 0.95; shadow = false; blur-background = true; full-shadow = false }
  panel = { opacity = 0.95; shadow = false; fade = false }
  devtools = { opacity = 0.95; shadow = false; fade = false; blur-background = true; full-shadow = false }
  dropdown_menu = { shadow = false; opacity = 0.95; blur-background = true; full-shadow = false }
  menu = {  shadow = false; full-shadow = false; blur-background = false }
};
