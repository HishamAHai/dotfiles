#+title: AwesomeWM Configuration
#+options: toc:2
* Table Of Content
- [[#main-configuration-file-rc-file][Main Configuration File (RC file)]]
- [[#top-bar-top_barlua][Top Bar (top_bar.lua)]]
- [[#bottom-bar-bottom_barlua][Bottom Bar (bottom_bar.lua)]]

* Main Configuration File (RC file)
The single most important file in any window manager is the configuration file. It is possible to write the complete configuration using a single =rc.lua= file, but since my configuration is large I did make my configuration in multiple separated file, for each component of the window manager.
- *IMPORTANT*: /bling is a module not written by me and we have to git close it into the modules directory.
 The first section in the rc file is importing some of the built-in libraries.
#+begin_src lua :tangle rc.lua
  pcall(require, 'luarocks.loader')
  local gears = require('gears')
  local awful = require('awful')
  local beautiful = require('beautiful')
  require('awful.autofocus')
  require('menubar')
  require('awful.hotkeys_popup')
  require('awful.hotkeys_popup.keys')
  local bling = require('modules/bling')
#+end_src
And then we specify the location of the theme file
#+begin_src lua :tangle rc.lua
  local config_dir = gears.filesystem.get_configuration_dir()
  beautiful.init(config_dir .. "themes/theme.lua")
#+end_src
At this point we import our modules
#+begin_src lua :tangle rc.lua
  require('keys')
  require('tags')
  --require('top_bar')
  require('bottom_bar')
  require('Menu')
  require('notifications')
  require('rules')
#+end_src
Enable windows switcher module provided by bling
#+begin_src lua :tangle rc.lua
  bling.widget.window_switcher.enable {
      type = "thumbnail", -- set to anything other than "thumbnail" to disable client previews

      -- keybindings (the examples provided are also the default if kept unset)
      hide_window_switcher_key = "Escape", -- The key on which to close the popup
      minimize_key = "n",                  -- The key on which to minimize the selected client
      unminimize_key = "N",                -- The key on which to unminimize all clients
      kill_client_key = "q",               -- The key on which to close the selected client
      cycle_key = "Tab",                   -- The key on which to cycle through all clients
      previous_key = "Left",               -- The key on which to select the previous client
      next_key = "Right",                  -- The key on which to select the next client
      vim_previous_key = "h",              -- Alternative key on which to select the previous client
      vim_next_key = "l",                  -- Alternative key on which to select the next client
  }
#+end_src
I don't use all the default layouts provided in the original =rc.lua=
#+begin_src lua :tangle rc.lua
  awful.layout.layouts = {
      awful.layout.suit.tile,
      awful.layout.suit.spiral.dwindle,
      awful.layout.suit.fair.horizontal,
      awful.layout.suit.max.fullscreen,
      awful.layout.suit.floating,
  }

#+end_src
Garbage collection (allows for lower memory consumption)
#+begin_src lua :tangle rc.lua
  collectgarbage('setpause', 110)
  collectgarbage('setstepmul', 1000)
#+end_src
* Top Bar (top_bar.lua)
My top bar is divided into two zones: left and right section.
- On the left side:
1. An icon which when clicked opens the menu
2.  Tags which are color coded
  - Active tag has a background
  -  Urgent tag (say for example if you have a web browser open on tag 2 and you clicked on a click in document open in tag 3, then tag 2 is called urgent)
- On the right side:
  - Number of available updates and total number of installed packages
  - Free space on home partition
  - Used memory
  - cpu utilization
  - Average load
  - Uptime
  - Monitor brightness
  - Date and time
  - Volume
  - keyboard layout
#+begin_src lua :tangle top_bar.lua
local awful = require('awful')
local beautiful = require('beautiful')
local gears = require('gears')
local wibox = require('wibox')
local xresources = require('beautiful.xresources')
local dpi = xresources.apply_dpi

-- Calls
require('widgets.decoration')
require('widgets.Date_widget')
require('widgets.Packages_widget')
require('widgets.Disk_widget')
require('widgets.Memory_widget')
require('widgets.Cpu_widget')
require('widgets.Load_avg_widget')
require('widgets.Uptime_widget')
local volume_widget = require("widgets.volume-widget.volume")
local volume_widget_widget = volume_widget({display_notification = true})
local brightness_widget = require("widgets.brightness-widget.brightness")
--require('widgets.Volume_widget')
--require('widgets.Net_widget')


local top_bar = {}
local screen_width = awful.screen.focused().geometry.width

awful.screen.connect_for_each_screen(function(s)
    -- Create the wibox
    s.top_bar = awful.wibar(
    {
        position = 'top',
        screen = s ,
        height = awful.screen.focused().geometry.height * 0.02,
        width = awful.screen.focused().geometry.width * 0.995,
        bg  =   '#0000',
        shape = function(cr, width, height)
            gears.shape.rounded_rect(cr, width, height, screen_width * 0.003) end
    }
    )

    -- Add widgets to the wibox
    s.top_bar:setup {
        {
            {
                layout = wibox.layout.align.horizontal,
                { -- Left widgets
                {
                    layout = wibox.layout.fixed.horizontal,
                    separator, logo, separator,
                    s.mytaglist, separator,
                },
                widget = wibox.container.background,
                shape = Wdt_shape,
                bg = Wdt_bg
            },
            { -- Middle widgets
            layout = wibox.layout.fixed.horizontal,
        },
        {
            {
                    layout = wibox.layout.fixed.horizontal,
                    net_widget, separator,
                    pkg_widget, separator,
                    disk_widget, separator,
                    mem_widget, separator,
                    cpu_widget, separator,
                    Load_wdt, separator,
                    uptime_wdt, separator,
                    {
                        brightness_widget{
                            type = 'icon_and_text',
                            program= 'ybacklight',
                            path_to_icon = '/usr/share/icons/Papirus/48x48/status/notification-display-brightness-high.svg',
                            step = 10
                            },
                            left = screen_width * 0.002,
                            right = screen_width * 0.002,
                            widget = wibox.container.margin
                    },
                    separator,
                    datewidget, separator,
                    volume_widget_widget,
                    separator, kbd_widget,
        },
        widget = wibox.container.background,
        shape = Wdt_shape,
        bg = Wdt_bg
        },
            },
            top = screen_width * 0.001,
            bottom = screen_width * 0.001,
            right = screen_width * 0.001,
            left = screen_width * 0.001,
            widget = wibox.container.margin
        },
        widget = wibox.container.background,
        shape = bar_wdt_shape,
        bg = beautiful.bg_normal
    }

end)
return top_bar
#+end_src
* Bottom Bar (bottom_bar.lua)
Similar to the top bar, the bottom bar contains two sections:
- On the left side:
 - A widget showing the currently playing media file (video or audio)
 - Window name of the focused window
- On the right side:
 - Two arrows to increase or decrease the size of the master window (on the left)
 - Next prayer and remaining time
 - Weather
 - gpu temperature
 - cpu temperature
 - kernel version
 - layout
 - system tray
#+begin_src lua :tangle bottom_bar.lua
local awful         =   require("awful")
local beautiful     =   require('beautiful')
local gears         =   require('gears')
local wibox         =   require("wibox")
local xresources    =   require('beautiful.xresources')
local dpi           =   xresources.apply_dpi
--require('top_right')
--require('top_left')
require('top_bar')
require('widgets.Prayers_widget')
require('widgets.Media_widget')
require('widgets.Date_widget')
require('widgets.Kernel_widget')
require('widgets.WEATHER_WIDGET')
require('widgets.Cpu_temp_widget')
require('widgets.Gpu_temp_widget')
require('widgets.quotes')
require('widgets.clientSize')

local bottom_bar = {}

local screen_width  =   awful.screen.focused().geometry.width
local screen_height =   awful.screen.focused().geometry.height

layoutbox = wibox.widget {
    {
        awful.widget.layoutbox(),
        widget = wibox.container.margin(_,Wdt_lmgn,Wdt_rmgn,_,_,_,_),
    },
    --bg = Wdt_bg,
    shape   =   Wdt_shape,
    widget  =   wibox.container.background
}

awful.screen.connect_for_each_screen(function(s)

    s.bottom_bar = awful.wibar(
    {
        position    =   'bottom',
        screen      =   s,
        height      =   awful.screen.focused().geometry.height * 0.02,
        width       =   awful.screen.focused().geometry.width * 0.99,
        bg          =   '#0000',
        shape       =   function(cr, width, height)
            gears.shape.rounded_rect(cr, width, height, screen_width * 0.003) end

    }
    )
-- ========================= Widgets and bars placement =======================
    s.top_bar.y               =   screen_height * 0.00208
    --screen[1].top_right.x       =   screen_width * 0.606
    ----screen[2].top_right.x       =   screen_width * 1.554
    --s.top_right.y               =   screen_height * 0.00208
    --screen[1].top_left.x        =   screen_width * 0.0015
    ----screen[2].top_left.x        =   screen_width * 1.0025
    --s.top_left.y                =   screen_height * 0.00208
    ----s.top_left.y                =   screen_height * 0.00
    screen[1].Prayers_widget.x  =   screen_width * 0.92
    --screen[2].Prayers_widget.x  =   screen_width * 1.867
    s.Prayers_widget.y          =   screen_height * 0.258
    screen[1].WEATHER_WIDGET.x  =   screen_width * 0.92
    --screen[2].WEATHER_WIDGET.x  =   screen_width * 1.867
    s.WEATHER_WIDGET.y          =   screen_height * 0.5186
    screen[1].quotes.x                  =   screen_width * 0.92
    --screen[2].quotes.x                  =   screen_width * 1.887
    s.quotes.y                  =   screen_height * 0.6318
    s.bottom_bar.y              =   screen_height * 0.978

    s.bottom_bar:setup {
        {
            {
                layout = wibox.layout.align.horizontal,
                {
                    layout = wibox.layout.fixed.horizontal,
                    {
                        {
                            {
                                layout = wibox.layout.fixed.horizontal,
                                {
                                    text = 'Now Playing >>> ',
                                    widget = wibox.widget.textbox
                                },
                                {
                                    Media_wdt,
                                    fg = beautiful.color3,
                                    widget = wibox.container.background
                                },
                                {
                                    text = ' <<<',
                                    widget = wibox.widget.textbox
                                }
                            },
                            widget = wibox.container.margin(_,Wdt_lmgn,Wdt_rmgn,_,_,_,_)
                        },
                        bg = Wdt_bg,
                        shape = Wdt_shape,
                        widget = wibox.container.background
                    }, separator
                },
                {
                    layout = wibox.layout.fixed.horizontal,
                    mytasklist
                },
                {
                    {
                        layout = wibox.layout.fixed.horizontal,
                        separator, inc_left, separator, inc_right,
                        {
                            {
                                Pryr_wdt,
                                widget = wibox.container.margin(_,Wdt_lmgn,Wdt_rmgn,_,_,_,_)
                            },
                            --bg = Wdt_bg,
                            shape = Wdt_shape,
                            widget = wibox.container.background
                        },
                        separator,
                        {
                            {
                                WEATHER_WIDGET_DESC,
                                widget = wibox.container.margin(_,2,Wdt_rmgn,_,_,_,_)
                            },
                            --bg = Wdt_bg,
                            shape = Wdt_shape,
                            widget = wibox.container.background,
                        },
                        separator,
                        gpu_temp_widget, separator,
                        cpu_temp_widget, separator,
                        kernel_wdt, separator,
                        layoutbox, separator,
                        round_systry,
                    },
                    shape = Wdt_shape,
                    bg = Wdt_bg,
                    widget = wibox.container.background,
                },
            },
            margins = screen_width * 0.001,
            widget = wibox.container.margin
        },
        widget = wibox.container.background,
        shape = bar_wdt_shape,
        bg = beautiful.bg_normal,
    }
end)

return bottom_bar
#+end_src
* Widgets
The killer feature of AwesomeWM is its widgets system. I spent over a year refining the widgets I use on a daily basis.
** Prayer Widget (Salat)
This widget pull the times using =curl=, =systemd=, =mpv= and a bash script located at =~/.local/bin=
- Make sure that you have a =bin= directory inside the =.local= directory and the script =prayerTimes.sh= is stored there!
- Also make sure that the =bin= directory is added to your path.
- Edit the coordinates, city, country, method and adjustment in the =prayerTimes.sh= to suite your current location.
 - =curl= is used to download the times to a json file.
 - =mpv= is used to play the Azan
 - =systemd= is used to schedule the download time
- Create a directory inside the =.config= and name it =systemd=, and inside it another directory called =user=.
- Create two files inside =.config/systemd/user=, =prayerTimes.service= and =prayerTimes.timer=. These two files are stored in this repository, so you can copy and paste theme directly.
- Enable the service and timer using the following commands:
 - =systemctl --user enable --now prayerTimes.service=
 - =systemctl --user enable --now prayerTimes.timer=
- The timer will update automatically each 8 hours
#+begin_src lua :tangle widgets/Prayers_widget.lua
local json          =   require('json')
local awful         =   require('awful')
local beautiful     =   require('beautiful')
local icons_dir     =   os.getenv('HOME') .. '/.config/awesome/icons/prayers/'
local naughty       =   require('naughty')
local watch         =   require('awful.widget.watch')
local wibox         =   require('wibox')
local xresources    =   require('beautiful.xresources')
local dpi           =   xresources.apply_dpi

local GET_TIMES_CMD = "curl -s '%s'"
screen_height = awful.screen.focused().geometry.height
screen_width = awful.screen.focused().geometry.width

local Prayers_widget = {}

Pryr_wdt = wibox.widget {
    {
        {
            id      =   'mini_widget',
            widget  =   wibox.widget.textbox
        },
        valign = 'center',
        widget = wibox.container.place,
    },
    {
        {
            {
                id = 'mini_icon',
                image = icons_dir .. 'mosque.svg',
                forced_width = screen_width * 0.01,
                forced_height = screen_width * 0.01,
                resize = true,
                widget = wibox.widget.imagebox
            },
            top = screen_width * 0.0005,
            bottom = screen_width * 0.0005,
            widget = wibox.container.margin
        },
        halign = 'center',
        valign = 'center',
        widget = wibox.container.place
    },
    spacing = screen_width * 0.003,
    layout = wibox.layout.fixed.horizontal
}

local TZ_adj    =   os.time()-os.time(os.date('!*t'))
local bgcolor   =   beautiful.fg_occupied .. 'a9'
local icons_ext =   '.png'

Prayer_id       =   {'Fajr_widget', 'Shuruq_widget', 'Duhur_widget', 'Asr_widget', 'Maghrib_widget', 'Isha_widget'}
Prayer_bg_id    =   {'Fajr_widget_bg', 'Shuruq_widget_bg', 'Duhur_widget_bg', 'Asr_widget_bg', 'Maghrib_widget_bg', 'Isha_widget_bg'}
Prayer_names    =   {'الـــفجـــر', 'الشروق', 'الـــظهر', 'العــــصر', 'المــغرب', 'الـعشاء'}
icon_name       =   {'praying_fajr', 'praying', 'praying_duhur', 'praying_asr', 'praying_maghrib', 'praying_isha'}

local function update_widget(widget,stdout)
    Current_time    =   os.date('%H:%M')
    Result          =   json.decode(stdout)
    Times = {}
    table.insert(Times,Result.data.timings.Fajr)
    table.insert(Times,Result.data.timings.Sunrise)
    table.insert(Times,Result.data.timings.Dhuhr)
    table.insert(Times,Result.data.timings.Asr)
    table.insert(Times,Result.data.timings.Maghrib)
    table.insert(Times,Result.data.timings.Isha)

    function Prayer_utc(P_h_m)
        str                         =   os.date('%a %d %b %Y ') .. P_h_m .. ':' .. os.date('%S')
        p                           =   "%a+ (%d+) (%a+) (%d+) (%d+):(%d+):(%d+)"
        Day,Month,Year,Hour,Min,Sec =   str:match(p)
        MON                         =   {Jan=1,Feb=2,Mar=3,Apr=4,May=5,Jun=6,Jul=7,Aug=8,Sep=9,Oct=10,Nov=11,Dec=12}
        Month                       =   MON[Month]
        Seconds                     =   os.time({day=Day,month=Month,year=Year,hour=Hour,min=Min,sec=Sec}) - os.time() - TZ_adj
        return Seconds
    end

    function Diff(next_p)
        In_sec  =   Prayer_utc(next_p)
        Total   =   os.date('%H:%M',In_sec)
        return Total
    end


    function Notification (name)
        naughty.notify(
        {
            timeout     =   30,
            font        =   'Geeza Pro 11',
            icon        =   icons_dir .. 'mosque.svg',
            icon_size   =   dpi(48),
            text        =   'حان الآن موعد صلاة <span fgcolor="' .. bgcolor .. '"><b>' .. name .. '</b></span> حسب التوقيت المحلي لمدينة باريلوتشي',
            position    =   'top_middle',
        }
        )
        if name == Prayer_names[1] then
            awful.spawn.with_shell('mpv --volume=70 $HOME/.local/share/Azan_fajr.webm')
        else
            awful.spawn.with_shell('mpv --volume=70 $HOME/.local/share/Azan.webm')
        end
    end

Texts = {}
for i=1,6 do
    table.insert(Texts, '۞ ' .. Prayer_names[i] .. '\t\t\t' .. Times[i]     .. ' ۞')
    widget:get_children_by_id(Prayer_bg_id[i])[1]:set_bg(beautiful.bg_empty)
    widget:get_children_by_id(Prayer_bg_id[i])[1]:set_shape(Wdt_shape)
    widget:get_children_by_id(Prayer_id[i])[1]:set_font('Noto Kufi Arabic 9')
end

    if Current_time >= Times[1] and Current_time < Times[6] then
        for i=1,5 do
            if Current_time >= Times[i] and Current_time < Times[i+1] then
                if Current_time == Times[2] then
                    awful.spawn.with_shell('mpv $HOME/.local/share/Nature.mp3')
                elseif Current_time == Times[i] then
                    Notification(Prayer_names[i])
                end
                widget:get_children_by_id(Prayer_bg_id[i])[1]:set_bg(bgcolor)
                Remain          =   Diff(Times[i+1])
                Image           =   icons_dir .. icon_name[i] .. icons_ext
                Next_prayer     =   Times[i+1]
                Next_prayer_str =   Prayer_names[i+1]
            end
        end
    else 
        if Current_time == Times[6] then
            Notification(Prayer_names[6])
        end
        widget:get_children_by_id(Prayer_bg_id[6])[1]:set_bg(bgcolor)
        Remain          =   Diff(Times[1])
        Image           =   icons_dir .. icon_name[6] .. icons_ext
        Next_prayer     =   Times[1]
        Next_prayer_str =   Prayer_names[1]
    end

    ArabicDay       =   Result.data.date.hijri.weekday.ar
    ArabicDayNum    =   Result.data.date.hijri.day
    HijriMonth      =   Result.data.date.hijri.month.ar
    HijriYear       =   Result.data.date.hijri.year
    HijriDate       =   ArabicDayNum .. ' ' .. HijriMonth .. ' ' .. HijriYear .. ' هجرية\n'
    Heading         =   'مواقيت الصلاة ليوم ' .. ArabicDay .. '\n' .. HijriDate

    widget:get_children_by_id('icon')[1]:set_image(Image)
    widget:get_children_by_id('Heading_widget')[1]:set_markup(Heading ..
    'الوقت المتبقي:\t\t<span fgcolor="' .. beautiful.fg_occupied .. '">'.. Remain .. '</span> ۞ ')
    for i=1,6 do
        widget:get_children_by_id(Prayer_id[i])[1]:set_markup(Texts[i])
    end

    Pryr_wdt:get_children_by_id('mini_widget')[1]:set_markup('الصلاة القادمة: <span fgcolor="' 
    .. beautiful.color2 .. '">' .. Next_prayer_str .. ' ' .. Next_prayer  .. '</span> ' 
    .. ' (الوقت المتبقي <span fgcolor="' .. beautiful.color2 .. '">' .. Remain .. '</span>)')

end

Prayers_widget = wibox.widget {
    {
        {
            id              =   'icon',
            forced_height   =   screen_width * 0.045,
            forced_width    =   screen_width * 0.045,
            resize          =   true,
            opacity         =   0.9,
            widget          =   wibox.widget.imagebox
        },
        halign   =   'center',
        valign   =   'center',
        widget  =   wibox.container.place
    },
    
    -- Heading
    {
        {
            {
                id      =   'Heading_widget',
                font    =   'Noto Kufi Arabic 9',
                widget  =   wibox.widget.textbox
            },
            right = screen_width * 0.0015,
            left = screen_width * 0.0015,
            widget = wibox.container.margin
        },
        bg = beautiful.bg_empty,
        shape = Wdt_shape,
        widget = wibox.container.background
    },
    
    { -- Fajr
        {
            id      =   Prayer_id[1],
            widget  =   wibox.widget.textbox
        },
        id      =   Prayer_bg_id[1],
        widget = wibox.container.background
    },
    
    { -- Shuruq
        {
            id      =   Prayer_id[2],
            widget  =   wibox.widget.textbox
        },
        id      =   Prayer_bg_id[2],
        widget = wibox.container.background
    },
    
    { -- Dhuhr
        {
            id      =   Prayer_id[3],
            widget  =   wibox.widget.textbox
        },
        id = Prayer_bg_id[3],
        widget = wibox.container.background
    },
    
    { -- Asr
        {
            id      =   Prayer_id[4],
            widget  =   wibox.widget.textbox
        },
        id      =   Prayer_bg_id[4],
        widget = wibox.container.background
    },
    
    { -- Maghrib
        {
            id      =   Prayer_id[5],
            widget  =   wibox.widget.textbox
        },
        id      =   Prayer_bg_id[5],
        widget = wibox.container.background
    },
    
    { -- Isha
        {
            id      =   Prayer_id[6],
            widget  =   wibox.widget.textbox
        },
        id      =   Prayer_bg_id[6],
        widget = wibox.container.background
    },
    spacing = screen_height * 0.002,
    layout = wibox.layout.fixed.vertical,
}

CAT_CMD = [[bash -c 'cat $HOME/.local/share/prayers.json']]
watch(CAT_CMD, timeout, update_widget, Prayers_widget)

awful.screen.connect_for_each_screen(function(s)
    s.Prayers_widget = awful.wibar(
    {
        screen  =   s,
        height  =   screen_height * 0.257,
        width   =   screen_width * 0.078,
        bg      =   '#0000',
        shape   =   bar_wdt_shape
    }
    )

    s.Prayers_widget:setup {
        {
            {
                layout  =   wibox.layout.fixed.horizontal,
                Prayers_widget
            },
            halign = 'center',
            widget = wibox.container.place
        },
        widget = wibox.container.background,
        shape = big_wdt_shape,
        bg = beautiful.bg_normal
    }

end)
Prayers_widget:connect_signal('button::release',function(_,_,_,button)
    if (button == 1) then
       awful.spawn.with_shell('prayerTimes.sh')
    end
end)

return Prayers_widget
#+end_src
